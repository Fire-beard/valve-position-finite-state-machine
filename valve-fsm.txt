//state machine that reads IO and handles valve opened, closed, and transition
//with failed to open and failed to close states based on timers/

#include <stdio.h>
#include <unistd.h>
#include <stbool.h>

enum valve_state {
    CLOSED = 0,
    OPENED,
    TRANSITION,
    FAILED_TO_OPEN,
    FAILED_TO_CLOSE,
    MAXIMUM_STATE_VAL /*this represents the maximum state
};
enum valve_event {
    TIMER_EXPIRED = 0,
    OPEN_COMMAND,
    CLOSE_COMMAND,
    MAXIMUM_STATE_VAL /*this represents the maximum state 
};
enum LED_LIGHTS
    LED_CLOSED = 0,
    LED_OPENED,
    LED_TRANSITION,
    LED_FAILEDTOOPEN,
    LED_FAILEDTOCLOSE,
    LED_MAXIMUM_STATE_VAL /*max state value
};
enum valve_state valve_fsm(enum valve_state current_state, enum valve_event event, int timer_expired) {
    switch (current_state) {
    case CLOSED:
        if (event == OPEN_COMMAND) {
            return TRANSITION;
	    
        }
        break;
    case OPENED:
        if (event == CLOSE_COMMAND) {
            return TRANSITION;
        }
        break;
    case TRANSITION:
        if (timer_expired) {
            if (event == OPEN_COMMAND) {
                return FAILED_TO_OPEN;
            } else if (event == CLOSE_COMMAND) {
                return FAILED_TO_CLOSE;
            }
        } else if (event == TIMER_EXPIRED) {
            if (current_state == TRANSITION && event == OPEN_COMMAND) {
                return OPENED;
            } else if (current_state == TRANSITION && event == CLOSE_COMMAND) {
                return CLOSED;
            }
        }
        break;
    case FAILED_TO_OPEN:
    case FAILED_TO_CLOSE:
	// Handle error
        break;
    default:
        return CLOSED;
    }
    return current_state;
}
void ind_lights_write(enum valve_state state) 
{ 
   enum LED_LIGHTS lights = 0;
   switch (state) {
	case CLOSED:
	   lights = (1 << 0)
	   break;
	case OPENED:
	   lights = (1 << 1)
	   break;
	case TRANSITION:
	   lights = (1 << 2)
	   break;
	case FAILEDTOCLOSE:
	   lights = (1 << 3)
	   break;
	case FAILEDTOOPENM:
	   lights = (1 << 4)
	   break;
	default:
	   printf("Error Invalid LED State/n")
   return 0;
}	
int main(void) {
    enum valve_state state = CLOSED;
    enum valve_event event;
    int timer_expired = 0;

    while (1) {
        printf("Current state: %d\n", state);
        sleep(1); // Simulate timer expiration
        timer_expired = 1; // Simulate timer expiration

        // Simulate events
        if (state == CLOSED) {
            event = OPEN_COMMAND;
        } else if (state == OPENED) {
            event = CLOSE_COMMAND;
        } else {
            event = TIMER_EXPIRED;
        }

        state = valve_fsm(state, event, timer_expired);
	ind_lights(valve_state)
    }

    return 0;
}

