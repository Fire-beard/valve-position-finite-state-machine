//state machine that reads IO and handles valve opened, closed, and transition
//with failed to open and failed to close states based on timers\


#include <stdio.h>
#include <unistd.h>
#include <stbool.h>


enum valve_state {
    CLOSED,
    OPENED,
    TRANSITION,
    FAILED_TO_OPEN,
    FAILED_TO_CLOSE
};
enum valve_event {
    TIMER_EXPIRED,
    OPEN_COMMAND,
    CLOSE_COMMAND
};

//booleans that light up panelboard indicator lights

bool light_closed = false;
bool light_opened = false;
bool light_transition = false;
bool light_failedtoopen = false;
bool light_failedtoclose = false;

enum valve_state valve_fsm(enum valve_state current_state, enum valve_event event, int timer_expired) {
    switch (current_state) {
    case CLOSED:
        if (event == OPEN_COMMAND) {
            return TRANSITION;
	    
        }
        break;
    case OPENED:
        if (event == CLOSE_COMMAND) {
            return TRANSITION;
        }
        break;
    case TRANSITION:
        if (timer_expired) {
            if (event == OPEN_COMMAND) {
                return FAILED_TO_OPEN;
            } else if (event == CLOSE_COMMAND) {
                return FAILED_TO_CLOSE;
            }
        } else if (event == TIMER_EXPIRED) {
            if (current_state == TRANSITION && event == OPEN_COMMAND) {
                return OPENED;
            } else if (current_state == TRANSITION && event == CLOSE_COMMAND) {
                return CLOSED;
            }
        }
        break;
    case FAILED_TO_OPEN:
    case FAILED_TO_CLOSE:
	// Handle error
        break;
    default:
        return CLOSED;
    }
    return current_state;
}

void ind_lights(int valve_state)
{
	switch(valve_state)
	case CLOSED: /*valve closed, CLOSED ind light on*/
		light_closed = true;
		light_opened = false;
		light_transition = false;
		light_failedtoopen = false;
		light_failedtoclose = false; 
		break;
	case OPENED: /*valve opened, opened ind light on*/
		light_closed = false;
		light_opened = true;
		light_transition = false;
		light_failedtoopen = false;
		light_failedtoclose = false; 
		break;
	case TRANSITION: /*valve transition, ind light on*/
		light_closed = false;
		light_opened = false;
		light_transition = true;
		light_failedtoopen = false;
		light_failedtoclose = false; 
		break;
	case FAILED_TO_OPEN: /*valve failed to open, ind light on*/
		light_closed = false;
		light_opened = false;
		light_transition = false;
		light_failedtoopen = true;
		light_failedtoclose = false; 
		break;
	case FAILED_TO_CLOSE: /*valve failed to close, ind light on*/
		light_closed = false;
		light_opened = false;
		light_transition = false;
		light_failedtoopen = false;
		light_failedtoclose = true; 
		break;
};

int main(void) {
    enum valve_state state = CLOSED;
    enum valve_event event;
    int timer_expired = 0;

    while (1) {
        printf("Current state: %d\n", state);
        sleep(1); // Simulate timer expiration
        timer_expired = 1; // Simulate timer expiration

        // Simulate events
        if (state == CLOSED) {
            event = OPEN_COMMAND;
        } else if (state == OPENED) {
            event = CLOSE_COMMAND;
        } else {
            event = TIMER_EXPIRED;
        }

        state = valve_fsm(state, event, timer_expired);
	ind_lights(valve_state)
    };

    return 0;
}
